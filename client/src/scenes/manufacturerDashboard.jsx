import React, { useState, useEffect } from 'react'
import '../manufacturerStyles.css'

const DashboardPage = () => {
  const [orders, setOrders] = useState([])
  const [messages, setMessages] = useState([])
  const [transporters, setTransporters] = useState([])
  const [selectedTransporter, setSelectedTransporter] = useState('')
  const [to, setTo] = useState('')
  const [from, setFrom] = useState('')
  const [address, setAddress] = useState('')
  const [user, setUser] = useState(null)
  const [quantity, setQuantity] = useState(1)

  const handleQuantityChange = (e) => {
    setQuantity(parseInt(e.target.value))
  }

  useEffect(() => {
    // Fetch transporters from the server or an API
    setUser(JSON.parse(localStorage.getItem('user')))
    fetchTransporters()
    fetchManufacturerData()

      
  }, [])

  const fetchManufacturerData = async () => {
    try {
      // Retrieve the authentication token from local storage, session storage, or cookie
      const token = localStorage.getItem('token')
      const currentUser = JSON.parse(localStorage.getItem('user'))
      if (token) {
        const email = currentUser.email
        // Make a request to a protected endpoint on the server, including the authentication token in the headers
        const response = await fetch(`http://localhost:3001/api/user/${email}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        })

        const data = await response.json()
        setAddress(data.address)
      }
    } catch (error) {
      console.error('Error fetching user details:', error)
    }
  }

  const fetchTransporters = async () => {
    try {
      // Make API request to fetch transporters
      const response = await fetch('http://localhost:3001/users/username', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      })
      const data = await response.json()

      // Set the fetched transporters in the state
      setTransporters(data.usernames)
    } catch (error) {
      console.log('Error fetching transporters:', error)
    }
  }

  const handleFetchMessages = async () => {
    try {
      // Make the API request to fetch messages
      const token = localStorage.getItem('token')
      const username = user.username
      const response = await fetch(`http://localhost:3001/response/${username}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
      const responseData = await response.json()

      if (response.ok) {
        // Set the messages state with the received data
        setMessages(responseData.messages)
      } else {
        // Handle the error if the API request failed
        console.error('Failed to fetch messages:', response.status)
      }
    } catch (error) {
      // Handle any other errors that occurred during the request
      console.error('Error fetching messages:', error)
    }
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    // Perform logic to save the order
    const newOrder = {
      to,
      from,
      quantity,
      address,
      transporter: selectedTransporter,
      manufacturerName: user.username,
      role: user.role
    }

    setSelectedTransporter('')
    setTo('')
    setFrom('')
    setQuantity(1)

    fetch('http://localhost:3001/auth/message/manufacturer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newOrder),
    })
      .then((response) => response.json())
      .catch((error) => {
        // Handle any errors that occurred during the request
        console.error(error)
      })
  }

  return (
    <div className="container">
      <h2>Manufacturer Dashboard</h2>

      <h3>Place Order</h3>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="orderId">Order ID:</label>
          <input
            type="text"
            id="orderId"
            placeholder='It will be autogenerated'
            readOnly
          />
        </div>
        <div>
          <label htmlFor="selectedTransporter">Transporter:</label>
          <select
            id="selectedTransporter"
            value={selectedTransporter}
            onChange={(e) => setSelectedTransporter(e.target.value)
            }
            required
          >
            <option value="">Select Transporter</option>
            {transporters.map((transporter) => (
              <option key={transporter} value={transporter}>
                {transporter}
              </option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="to">To:</label>
          <input
            type="text"
            id="to"
            value={to}
            onChange={(e) => setTo(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="from">From:</label>
          <input
            type="text"
            id="from"
            value={from}
            onChange={(e) => setFrom(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="quantity">Quantity:</label>
          <select
            id="quantity"
            value={quantity}
            onChange={handleQuantityChange}
            required
          >
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
          </select>
        </div>
        <div>
          <label htmlFor="address">Address:</label>
          <input
            type="text"
            id="address"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            readOnly
          />
        </div>
        <button type="submit">Place Order</button>
      </form>

      <button type="button" onClick={handleFetchMessages}>
        Fetch Messages from Transporters
      </button>

      <h3>Messages</h3>
      {messages.map((message) => (
        <ul key={message._id}>
          <li>Order id: {message.orderID}</li>
          <li>Price: {message.price}</li>
        </ul>
      ))}
    </div>
  )
}

export default DashboardPage
